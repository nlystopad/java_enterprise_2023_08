openapi: 3.0.3

info:
  title: School manager
  description: |
    Application for managing students in school
  version: 0.0.1

servers:
  - url: https://{developmentStage}.com/{apiVersion}
    variables:
      developmentStage:
        default: school-manager
        enum:
          - school-manager
          - school-manager-stage
          - school-manager-dev
      apiVersion:
        default: api/v1
        description: Version of application

tags:
  - name: StudentManager
    description: Api to manage students in school
  - name: SchoolManager
    description: Api to manage schools


paths:
  /student:
    post:
      tags:
        - StudentManager
      summary: creates a Student object
      description: |
        this is an endpoint that creates Student.
        It receives object (type Student) in request body 
        and saves object in database
      operationId: addStudent
      parameters:
        - in: header
          name: debug
          schema:
            type: integer
            enum: [ 0, 1 ]
            default: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              student:
                $ref: '#/components/examples/Student'
      responses:
        '201':
          description: Returns created Student instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                student:
                  $ref: '#/components/examples/Student'
          links:
            GetStudentById:
              operationId: getStudentById
              parameters:
                id: '$response.body#/id'
        '404':
          $ref: '#/components/responses/NotFound'

  /student/{id}:
    get:
      tags:
        - StudentManager
      summary: returns a Student object by id
      description: |
        this is an endpoint that returns Student instance by it's id.
        It receives id (type integer) in path parameters
        and returns object from database
      operationId: getStudentById
      parameters:
        - name: id
          in: path
          description: Student Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Returns Student instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
              examples:
                student:
                  $ref: '#/components/examples/Student'
        '404':
          $ref: '#/components/responses/NotFound'



  /updateStudent/{id}:
    put:
      tags:
        - StudentManager
      summary: updates a Student object by id
      description: |
        this is an endpoint that updates Student instance by it's id.
        It receives id (type integer) in path parameters,  
        name (type string), age (type integer), averageMark (type integer),
        schoolName (type string) and teachers (type array of strings) in query parameters
        and updates object in database
      operationId: updateStudentById
      parameters:
        - name: id
          in: path
          description: Student Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              studentUpdate:
                $ref: '#/components/examples/Student'
      responses:
        '200':
          description: Returns Student instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFound'

  /subscribe/{id}:
    post:
      summary: Subscribe to updates on students average mark by id
      tags:
        - StudentManager
      operationId: subscribeById
      parameters:
        - name: id
          in: path
          description: Student Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                  format: url
              required:
                - callbackUrl
      responses:
        '201':
          description: Subscription created

  /school:
    post:
      tags:
        - SchoolManager
      summary: creates a school entity in the database
      description: |
        this is an endpoint that creates School instance.
        It receives School object in request body and creates object in database
      operationId: createSchool
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
            examples:
              school:
                $ref: '#/components/examples/School'
      responses:
        '201':
          description: School created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
    get:
      tags:
        - SchoolManager
      summary: retrieves a school entities from the database by their name
      description: |
        this is an endpoint that retrieves School instances from database.
        It receives school name (type string) in request parameters and gets all objects from database 
        with proper name
      operationId: getSchoolByName
      parameters:
        - name: name
          in: query
          description: school name
          required: true
          schema:
            type: string
      responses:
        '200' :
          description: all schools entities with such name were successfully retrieved from database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/School'

  /school/{id}:
    get:
      tags:
        - SchoolManager
      summary: retrieves a school entity from the database by its id
      description: |
        this is an endpoint that retrieves School instance from database.
        It receives school id (type integer) in path and gets school type object from database
      operationId: getSchoolById
      parameters:
        - name: id
          in: path
          description: school id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: school entity with such id was successfully retrieved from database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - SchoolManager
      summary: updates a school entity in the database by its id
      description: |
        this is an endpoint that updates School instance in database.
        It receives school id (type integer) in path and school type object in request body
        and updates entity in database if it exists
      operationId: updateSchoolById
      parameters:
        - name: id
          in: path
          description: school id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/School'
            examples:
              school:
                $ref: '#/components/examples/School'
      responses:
        '200':
          description: School was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - SchoolManager
      summary: deletes a school entity from the database by its id
      description: |
        this is an endpoint that deletes a School instance from the database.
        It receives school id (type integer) in path and deletes entity in database if it exists
      operationId: deleteSchoolById
      parameters:
        - name: id
          in: path
          description: school id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: School was deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFound'


components:
  responses:
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
        averageMark:
          type: number
          format: double
        schoolName:
          type: string
      required:
        - name
        - age


    School:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
          pattern: '\d+, .+'
      required:
        - name
        - age



    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  examples:
    Student:
      summary: An example of a student
      value:
        id: 1
        name: John
        age: 16
        averageMark: 90
        schoolName: Cool School
    School:
      summary: An example of a school
      value:
        id: 5
        name: Best School in the world
        address: 21, The Luckiest street

